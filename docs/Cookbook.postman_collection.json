{
	"info": {
		"_postman_id": "1f6f0575-87a5-4ce9-9471-c5cacced1e53",
		"name": "Cookbook",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "618282"
	},
	"item": [
		{
			"name": "Add User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// 99 9 9999-9999\r",
							"var ddd = _.random(10, 99)\r",
							"var additionalNumber = _.random(1, 9)\r",
							"var first4Digits = _.random(1000, 9999)\r",
							"var last4Digits = _.random(1000, 9999)\r",
							"\r",
							"var phoneNumber = ddd + \" \" + additionalNumber + \" \" + first4Digits + \"-\" + last4Digits\r",
							"\r",
							"pm.environment.set(\"phoneNumber\", phoneNumber)\r",
							"\r",
							"let password = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
							"\r",
							"postman.setGlobalVariable(\"PASSWORD\", password);\r",
							"postman.setGlobalVariable(\"EMAIL\", email);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate if the request is successfully\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.have.jsonBody(\"token\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept-Language",
						"value": "fr",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{EMAIL}}\",\r\n  \"password\": \"{{PASSWORD}}\",\r\n  \"phone\": \"{{phoneNumber}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLBASE}}/user",
					"host": [
						"{{URLBASE}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate if the request is successfully\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.jsonBody(\"token\");\r",
							"    pm.response.to.have.jsonBody(\"name\");\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.environment.set('TOKEN', jsonData.token);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{EMAIL}}\",\r\n  \"password\": \"{{PASSWORD}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLBASE}}/login",
					"host": [
						"{{URLBASE}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate Failure when email is invalid and not given password\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.jsonBody(\"messages\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Failure when email and password are not given\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.jsonBody(\"messages\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept-Language",
						"value": "pt-BR",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"invalid_email.com\",\r\n  \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLBASE}}/login",
					"host": [
						"{{URLBASE}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let newPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
							"\r",
							"postman.setGlobalVariable(\"NEWPASSWORD\", newPassword);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate if the request is successfully\", function(){\r",
							"    pm.response.to.have.status(204);\r",
							"\r",
							"    var newPassword = postman.getGlobalVariable('NEWPASSWORD');\r",
							"    pm.environment.set('PASSWORD', newPassword);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"currentPassword\": \"{{PASSWORD}}\",\r\n  \"newPassword\": \"{{NEWPASSWORD}}!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLBASE}}/user/password",
					"host": [
						"{{URLBASE}}"
					],
					"path": [
						"user",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login after password change",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate if the request is successfully\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.jsonBody(\"token\");\r",
							"    pm.response.to.have.jsonBody(\"name\");\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.environment.set('TOKEN', jsonData.token);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{EMAIL}}\",\r\n  \"password\": \"{{PASSWORD}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLBASE}}/login",
					"host": [
						"{{URLBASE}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Recipe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate if the recipe was successfully creted\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.jsonBody(\"id\");\r",
							"    pm.response.to.have.jsonBody(\"title\");\r",
							"    pm.response.to.have.jsonBody(\"category\");\r",
							"    pm.response.to.have.jsonBody(\"preparationMode\");\r",
							"    pm.response.to.have.jsonBody(\"ingredients\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept-Language",
						"value": "en-US",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"{{$randomNoun}}\",\r\n  \"category\": 2,\r\n  \"preparationMode\": \"{{$randomLoremParagraph}}\",\r\n  \"ingredients\": [\r\n    {\r\n      \"name\": \"{{$randomProduct}}\",\r\n      \"quantity\": \"{{$randomVerb}}\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLBASE}}/recipe",
					"host": [
						"{{URLBASE}}"
					],
					"path": [
						"recipe"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dashboard",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate if the dashboard was successfully returned\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    \r",
							"    let jsonData = pm.response.json()\r",
							"    pm.expect(jsonData.recipes).to.be.an(\"array\")\r",
							"    pm.expect(jsonData.recipes[0]).to.have.keys(\"id\", \"title\", \"ingredientsQuantity\")\r",
							"\r",
							"    pm.environment.set(\"RECIPE_ID\", jsonData.recipes[0].id);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ingredientTitle\": \"\",\r\n  \"category\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLBASE}}/dashboard",
					"host": [
						"{{URLBASE}}"
					],
					"path": [
						"dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate if the recipe was successfully returned\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.jsonBody(\"id\");\r",
							"    pm.response.to.have.jsonBody(\"title\");\r",
							"    pm.response.to.have.jsonBody(\"category\");\r",
							"    pm.response.to.have.jsonBody(\"preparationMode\");\r",
							"    \r",
							"    let jsonData = pm.response.json()\r",
							"    pm.expect(jsonData.ingredients).to.be.an(\"array\")  \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "en-US",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URLBASE}}/recipe/{{RECIPE_ID}}",
					"host": [
						"{{URLBASE}}"
					],
					"path": [
						"recipe",
						"{{RECIPE_ID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URLBASE",
			"value": "https://localhost:7021/api/v1",
			"type": "string"
		},
		{
			"key": "TOKEN",
			"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6InRoaWFnb21hdHVAZ21haWwuY29tIiwibmJmIjoxNjczNDM4OTEyLCJleHAiOjE2NzM0NDYxMTIsImlhdCI6MTY3MzQzODkxMn0.Y6hTc4gLB0ie_ow9z71cXbRQiONk48Aw5e1QOGqzQ6E",
			"type": "string",
			"disabled": true
		}
	]
}